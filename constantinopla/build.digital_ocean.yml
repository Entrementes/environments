- hosts: localhost
  gather_facts: False
  vars_files:
    - provisioning/vars/secret.yml
  vars:
    - node_name: constantinopla
    - do_ssh_name: ansible
    - do_ssh_pub_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    - do_ssh_private_key: "~/.ssh/id_rsa"
    - do_region: nyc1
    - do_size: 2gb
    - do_image: "ubuntu-16-04-x64"
    - node_volumes:
      - { size: 1, name: "{{ node_name }}-logs", description: "Log Archives"}
      - { size: 1, name: "{{ node_name }}-registry", description: "Docker Registry Archives"}
      - { size: 1, name: "{{ node_name }}-repository", description: "Repository Archives"}
  tasks:

    - name: Retrieve SSH keys
      uri:
        url: https://api.digitalocean.com/v2/account/keys
        method: GET
        follow_redirects: all
        HEADER_Authorization: Bearer {{ digital_ocean.token }}
        return_content: yes
      register: do_keys

    - name: Select Keys
      set_fact:
        selected_ssh_keys: "{{ ( do_keys['json']['ssh_keys'] | map(attribute='id') | list )}}"
      when: do_ssh_pub_key in ( do_keys["json"]["ssh_keys"] | map(attribute="public_key") | list )

    - name: Selected Keys are...
      debug:
        msg: "{{ selected_ssh_keys }}"

    - name: List Volumes
      uri:
        url: https://api.digitalocean.com/v2/volumes
        method: GET
        follow_redirects: all
        HEADER_Authorization: Bearer {{ digital_ocean.token }}
        return_content: yes
      register: do_current_volumes

    - name: Check Availability
      fail:
        msg: "{{ item['name'] }}"
      when: item["name"] in ( node_volumes | map(attribute="name") | list )
      with_items: "{{ do_current_volumes['json']['volumes'] }}"

    - name: Create Volumes
      uri:
        url: https://api.digitalocean.com/v2/volumes
        method: POST
        HEADER_Authorization: Bearer {{ digital_ocean.token }}
        HEADER_Content-Type: application/json
        return_content: yes
        status_code: 201
        body_format: json
        body: '{ "size_gigabytes": {{ item.size }}, "name": "{{ item.name }}", "description": "{{ item.description }}", "region": "{{ do_region }}"}'
      with_items: "{{ node_volumes }}"
      register: do_volumes

    - name: Select Created Volumes
      set_fact:
        selected_volumes: "{{ ( do_volumes['results'] | map(attribute='json.volume.id') | list ) }}"

    - name: Selected Volumes are...
      debug:
        msg: "{{ selected_volumes }}"

    - name: Create Node
      uri:
        url: https://api.digitalocean.com/v2/droplets
        method: POST
        HEADER_Authorization: Bearer {{ digital_ocean.token }}
        HEADER_Content-Type: application/json
        return_content: yes
        status_code: 202
        body_format: json
        body: '{"name":"{{ node_name }}","region":"{{ do_region }}","size":"{{ do_size }}","image":"{{ do_image }}","ssh_keys":{{ selected_ssh_keys }},"backups":false,"ipv6":false,"user_data":null,"private_networking":null,"volumes": {{ selected_volumes }} }'
      register: do_node

    - name: Select Created Node
      set_fact:
        selected_node: "{{ do_node['json']['droplet']['id'] }}"

    - name: "{{ node_name }} created..."
      debug:
        msg: "{{ do_node['json']['droplet'] }}"

    - name: Generate creation report
      template:
        src: 'provisioning/templates/digitalocean.info.yml.j2'
        dest: './{{ node_name }}.info.yml' 

